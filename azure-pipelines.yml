# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: Default

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |

    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞:"
  displayName: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è'
  
- task: PowerShell@2
  name: notify_telegram
  displayName: "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"
  inputs:
    targetType: 'inline'
    script: |
      # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
      $status = if ("$(Agent.JobStatus)" -eq "Succeeded") { "‚úÖ –£–°–ü–ï–•" } else { "‚ùå –û–®–ò–ë–ö–ê" }
      
      # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ HTML)
      $message = @"
      $status
      Pipeline: $(Build.DefinitionName)
      –í–µ—Ç–∫–∞: $(Build.SourceBranchName)
      –°–±–æ—Ä–∫–∞: #$(Build.BuildNumber)
      –°—Å—ã–ª–∫–∞: $(System.CollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)
      "@
      
      # –ö–æ–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      $encodedMessage = [System.Uri]::EscapeDataString($message)
      
      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
      $url = "https://api.telegram.org/bot7802544152:AAFej-O8UOM3dce3HG0Vc8BEx7qZA_ZdvhQ/sendMessage?chat_id=-4729697131&text=$encodedMessage"
      try {
        $response = Invoke-RestMethod -Uri $url
        Write-Host "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $($response | ConvertTo-Json -Depth 3)"
      } catch {
        Write-Host "–û—à–∏–±–∫–∞: $($_.Exception.Message)"
        Write-Host "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: $($_.Exception.Response | ConvertTo-Json -Depth 3)"
      }
  condition: always()